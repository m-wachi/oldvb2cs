%{
open Ast

%}

// The start token becomes a parser function in the compiled code:
%start prog

// Regular tokens
%token HELLO
%token <System.Int32> INT

// Misc tokens
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < Ast.Prog > prog

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  
prog: File end { $1 }
      | end      { $1 }

File:
	| HELLO						{ Prog [Ast.StringExp "hello"] }
	| HELLO HELLO				{ Prog [(Ast.StringExp "hello"); (Ast.StringExp "hello")] }
    | INT                       { Prog [(Ast.IntExp $1)] }

// Using F# keywords for nonterminal names is okay.
end: EOF { Prog [] }
