%{

%}

// The start token becomes a parser function in the compiled code:
%start prog

// Regular tokens
%token HELLO
%token <System.Int32> INT
%token <string> ID
%token EQUAL LPAREN RPAREN
%token LINE_TERM

// Misc tokens
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < Ast.Prog > prog
%type < (Ast.Statement * Ast.Comment) > logical_line
%type < Ast.Statement > statement

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  
prog: logical_line end { Ast.Prog [ $1 ] }
      | end      { Ast.Prog [] }

//File:
//	| HELLO						{ Prog [Ast.StringExp "hello"] }
//	| HELLO HELLO				{ Prog [(Ast.StringExp "hello"); (Ast.StringExp "hello")] }
//    | INT                       { Prog [(Ast.IntExp $1)] }
//    | ID INT                    { Prog [(Ast.VarExp (Ast.SimpleVar ($1, 0))); (Ast.IntExp $2)] }
    

logical_line: 
    statement LINE_TERM        { ($1, "") }


statement:
    ID EQUAL exp               { Ast.AssignStmt (Ast.SimpleVar($1, 0), $3) }

exp: 
    INT                        { Ast.IntExp $1 }


// Using F# keywords for nonterminal names is okay.
end: EOF {}
